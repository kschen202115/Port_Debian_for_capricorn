From 2b1ec829ea0b22ebf955624175ed2ba5aa6a2d18 Mon Sep 17 00:00:00 2001
From: kschen202115 <124901446+kschen202115@users.noreply.github.com>
Date: Wed, 15 Jan 2025 22:35:54 +0800
Subject: [PATCH] patch mi5s

---
 .../dts/qcom/msm8996pro-xiaomi-capricorn.dts  |  17 +-
 drivers/gpu/drm/panel/Kconfig                 |   8 +
 drivers/gpu/drm/panel/Makefile                |   1 +
 drivers/gpu/drm/panel/panel-lgd-td4722.c      | 265 ++++++++++++++++++
 4 files changed, 289 insertions(+), 2 deletions(-)
 create mode 100644 drivers/gpu/drm/panel/panel-lgd-td4722.c

diff --git a/arch/arm64/boot/dts/qcom/msm8996pro-xiaomi-capricorn.dts b/arch/arm64/boot/dts/qcom/msm8996pro-xiaomi-capricorn.dts
index 61cf2324e..c113e1c3d 100644
--- a/arch/arm64/boot/dts/qcom/msm8996pro-xiaomi-capricorn.dts
+++ b/arch/arm64/boot/dts/qcom/msm8996pro-xiaomi-capricorn.dts
@@ -22,7 +22,7 @@ touchscreen@20 {
 		compatible = "syna,rmi4-i2c";
 		reg = <0x20>;
 		interrupt-parent = <&tlmm>;
-		interrupts = <125 IRQ_TYPE_LEVEL_LOW>;
+		interrupts = <125 IRQ_TYPE_EDGE_FALLING>;
 		vdd-supply = <&vdd_3v2_tp>;
 		syna,reset-delay-ms = <200>;
 		syna,startup-delay-ms = <5>;
@@ -54,7 +54,7 @@ &mdss_dsi0 {
 	pinctrl-1 = <&mdss_dsi_sleep &mdss_te_sleep>;
 
 	panel: panel@0 {
-		compatible = "jdi,fhd-r63452";
+		compatible = "lgd,td4722";
 		reg = <0>;
 		reset-gpios = <&tlmm 8 GPIO_ACTIVE_LOW>;
 		backlight = <&pmi8994_wled>;
@@ -73,6 +73,19 @@ &mdss_dsi0_out {
 
 &pmi8994_wled {
 	status = "okay";
+	interrupts = <0x3 0xd8 0x2 IRQ_TYPE_EDGE_RISING>; 
+	interrupt-names = "short";
+	qcom,vref-mv = <0x72f8>;
+	qcom,switch-freq-khz = <0x258>;
+	qcom,ovp-mv = <0x733c>;
+	qcom,ilim-ma = <0x3d4>;
+	qcom,boost-duty-ns = <0x1a>;
+	qcom,mod-freq-khz = <0x2580>;
+	qcom,hyb-thres = <0x271>;
+	qcom,sync-dly-us = <0x320>;
+	qcom,fs-curr-ua = <0x4e20>;
+	qcom,cons-sync-write-delay-us = <0x3e8>;
+
 };
 
 &mss_pil {
diff --git a/drivers/gpu/drm/panel/Kconfig b/drivers/gpu/drm/panel/Kconfig
index 1abde220b..cbc8b2c63 100644
--- a/drivers/gpu/drm/panel/Kconfig
+++ b/drivers/gpu/drm/panel/Kconfig
@@ -1009,4 +1009,12 @@ config DRM_PANEL_XINPENG_XPP055C272
 	  Say Y here if you want to enable support for the Xinpeng
 	  XPP055C272 controller for 720x1280 LCD panels with MIPI/RGB/SPI
 	  system interfaces.
+config DRM_PANEL_LGD_TD4722
+	tristate "LGD_TD4722 panel"
+	depends on OF
+	depends on DRM_MIPI_DSI
+	depends on BACKLIGHT_CLASS_DEVICE
+	help
+	  Say Y here if you want to enable support for the LGD_TD4722
+	  DSI command mode panel as found in Xiaomi Mi 5s Devices.
 endmenu
diff --git a/drivers/gpu/drm/panel/Makefile b/drivers/gpu/drm/panel/Makefile
index 16296bc20..bf91462d5 100644
--- a/drivers/gpu/drm/panel/Makefile
+++ b/drivers/gpu/drm/panel/Makefile
@@ -103,3 +103,4 @@ obj-$(CONFIG_DRM_PANEL_VISIONOX_VTDR6130) += panel-visionox-vtdr6130.o
 obj-$(CONFIG_DRM_PANEL_VISIONOX_R66451) += panel-visionox-r66451.o
 obj-$(CONFIG_DRM_PANEL_WIDECHIPS_WS2401) += panel-widechips-ws2401.o
 obj-$(CONFIG_DRM_PANEL_XINPENG_XPP055C272) += panel-xinpeng-xpp055c272.o
+obj-$(CONFIG_DRM_PANEL_LGD_TD4722) += panel-lgd-td4722.o
diff --git a/drivers/gpu/drm/panel/panel-lgd-td4722.c b/drivers/gpu/drm/panel/panel-lgd-td4722.c
new file mode 100644
index 000000000..bb589fea9
--- /dev/null
+++ b/drivers/gpu/drm/panel/panel-lgd-td4722.c
@@ -0,0 +1,265 @@
+// SPDX-License-Identifier: GPL-2.0-only
+// Copyright (c) 2024 FIXME
+// Generated with linux-mdss-dsi-panel-driver-generator from vendor device tree:
+//   Copyright (c) 2013, The Linux Foundation. All rights reserved. (FIXME)
+
+#include <linux/delay.h>
+#include <linux/gpio/consumer.h>
+#include <linux/module.h>
+#include <linux/of.h>
+
+#include <video/mipi_display.h>
+
+#include <drm/drm_mipi_dsi.h>
+#include <drm/drm_modes.h>
+#include <drm/drm_panel.h>
+
+struct lgd_td4722 {
+	struct drm_panel panel;
+	struct mipi_dsi_device *dsi;
+	struct gpio_desc *reset_gpio;
+	bool prepared;
+};
+
+static inline struct lgd_td4722 *to_lgd_td4722(struct drm_panel *panel)
+{
+	return container_of(panel, struct lgd_td4722, panel);
+}
+
+static void lgd_td4722_reset(struct lgd_td4722 *ctx)
+{
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+	usleep_range(1000, 2000);
+	gpiod_set_value_cansleep(ctx->reset_gpio, 0);
+	msleep(160);
+}
+
+static int lgd_td4722_on(struct lgd_td4722 *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags |= MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_brightness(dsi, 0x00ff);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display brightness: %d\n", ret);
+		return ret;
+	}
+
+	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_CONTROL_DISPLAY, 0x24);
+	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_WRITE_POWER_SAVE, 0x00);
+
+	ret = mipi_dsi_dcs_set_tear_on(dsi, MIPI_DSI_DCS_TEAR_MODE_VBLANK);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set tear on: %d\n", ret);
+		return ret;
+	}
+
+	mipi_dsi_dcs_write_seq(dsi, MIPI_DCS_SET_PARTIAL_ROWS,
+			       0x00, 0x00, 0x02, 0xa7);
+
+	ret = mipi_dsi_dcs_exit_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to exit sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+
+	ret = mipi_dsi_dcs_set_display_on(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display on: %d\n", ret);
+		return ret;
+	}
+	msleep(20);
+
+	mipi_dsi_generic_write_seq(dsi, 0xb0, 0x04);
+	mipi_dsi_dcs_write_seq(dsi, 0x84, 0x00);
+	mipi_dsi_generic_write_seq(dsi, 0xc8, 0x11);
+	mipi_dsi_generic_write_seq(dsi, 0xca, 0x1c);
+	mipi_dsi_generic_write_seq(dsi, 0xea, 0x0f);
+	mipi_dsi_generic_write_seq(dsi, 0xb0, 0x03);
+
+	return 0;
+}
+
+static int lgd_td4722_off(struct lgd_td4722 *ctx)
+{
+	struct mipi_dsi_device *dsi = ctx->dsi;
+	struct device *dev = &dsi->dev;
+	int ret;
+
+	dsi->mode_flags &= ~MIPI_DSI_MODE_LPM;
+
+	ret = mipi_dsi_dcs_set_display_off(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to set display off: %d\n", ret);
+		return ret;
+	}
+	msleep(20);
+
+	ret = mipi_dsi_dcs_enter_sleep_mode(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to enter sleep mode: %d\n", ret);
+		return ret;
+	}
+	msleep(120);
+
+	return 0;
+}
+
+static int lgd_td4722_prepare(struct drm_panel *panel)
+{
+	struct lgd_td4722 *ctx = to_lgd_td4722(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (ctx->prepared)
+		return 0;
+
+	lgd_td4722_reset(ctx);
+
+	ret = lgd_td4722_on(ctx);
+	if (ret < 0) {
+		dev_err(dev, "Failed to initialize panel: %d\n", ret);
+		gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+		return ret;
+	}
+
+	ctx->prepared = true;
+	return 0;
+}
+
+static int lgd_td4722_unprepare(struct drm_panel *panel)
+{
+	struct lgd_td4722 *ctx = to_lgd_td4722(panel);
+	struct device *dev = &ctx->dsi->dev;
+	int ret;
+
+	if (!ctx->prepared)
+		return 0;
+
+	ret = lgd_td4722_off(ctx);
+	if (ret < 0)
+		dev_err(dev, "Failed to un-initialize panel: %d\n", ret);
+
+	gpiod_set_value_cansleep(ctx->reset_gpio, 1);
+
+	ctx->prepared = false;
+	return 0;
+}
+
+static const struct drm_display_mode lgd_td4722_mode = {
+	.clock = (1080 + 80 + 10 + 40) * (1920 + 4 + 2 + 4) * 60 / 1000,
+	.hdisplay = 1080,
+	.hsync_start = 1080 + 80,
+	.hsync_end = 1080 + 80 + 10,
+	.htotal = 1080 + 80 + 10 + 40,
+	.vdisplay = 1920,
+	.vsync_start = 1920 + 4,
+	.vsync_end = 1920 + 4 + 2,
+	.vtotal = 1920 + 4 + 2 + 4,
+	.width_mm = 64,
+	.height_mm = 114,
+};
+
+static int lgd_td4722_get_modes(struct drm_panel *panel,
+				struct drm_connector *connector)
+{
+	struct drm_display_mode *mode;
+
+	mode = drm_mode_duplicate(connector->dev, &lgd_td4722_mode);
+	if (!mode)
+		return -ENOMEM;
+
+	drm_mode_set_name(mode);
+
+	mode->type = DRM_MODE_TYPE_DRIVER | DRM_MODE_TYPE_PREFERRED;
+	connector->display_info.width_mm = mode->width_mm;
+	connector->display_info.height_mm = mode->height_mm;
+	drm_mode_probed_add(connector, mode);
+
+	return 1;
+}
+
+static const struct drm_panel_funcs lgd_td4722_panel_funcs = {
+	.prepare = lgd_td4722_prepare,
+	.unprepare = lgd_td4722_unprepare,
+	.get_modes = lgd_td4722_get_modes,
+};
+
+static int lgd_td4722_probe(struct mipi_dsi_device *dsi)
+{
+	struct device *dev = &dsi->dev;
+	struct lgd_td4722 *ctx;
+	int ret;
+
+	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
+	if (!ctx)
+		return -ENOMEM;
+
+	ctx->reset_gpio = devm_gpiod_get(dev, "reset", GPIOD_OUT_HIGH);
+	if (IS_ERR(ctx->reset_gpio))
+		return dev_err_probe(dev, PTR_ERR(ctx->reset_gpio),
+				     "Failed to get reset-gpios\n");
+
+	ctx->dsi = dsi;
+	mipi_dsi_set_drvdata(dsi, ctx);
+
+	dsi->lanes = 4;
+	dsi->format = MIPI_DSI_FMT_RGB888;
+	dsi->mode_flags = MIPI_DSI_MODE_VIDEO_BURST |
+			  MIPI_DSI_CLOCK_NON_CONTINUOUS;
+
+	drm_panel_init(&ctx->panel, dev, &lgd_td4722_panel_funcs,
+		       DRM_MODE_CONNECTOR_DSI);
+	ctx->panel.prepare_prev_first = true;
+
+	ret = drm_panel_of_backlight(&ctx->panel);
+	if (ret)
+		return dev_err_probe(dev, ret, "Failed to get backlight\n");
+
+	drm_panel_add(&ctx->panel);
+
+	ret = mipi_dsi_attach(dsi);
+	if (ret < 0) {
+		dev_err(dev, "Failed to attach to DSI host: %d\n", ret);
+		drm_panel_remove(&ctx->panel);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void lgd_td4722_remove(struct mipi_dsi_device *dsi)
+{
+	struct lgd_td4722 *ctx = mipi_dsi_get_drvdata(dsi);
+	int ret;
+
+	ret = mipi_dsi_detach(dsi);
+	if (ret < 0)
+		dev_err(&dsi->dev, "Failed to detach from DSI host: %d\n", ret);
+
+	drm_panel_remove(&ctx->panel);
+}
+
+static const struct of_device_id lgd_td4722_of_match[] = {
+	{ .compatible = "lgd,td4722" }, // FIXME
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, lgd_td4722_of_match);
+
+static struct mipi_dsi_driver lgd_td4722_driver = {
+	.probe = lgd_td4722_probe,
+	.remove = lgd_td4722_remove,
+	.driver = {
+		.name = "panel-lgd-td4722",
+		.of_match_table = lgd_td4722_of_match,
+	},
+};
+module_mipi_dsi_driver(lgd_td4722_driver);
+
+MODULE_AUTHOR("linux-mdss-dsi-panel-driver-generator <fix@me>"); // FIXME
+MODULE_DESCRIPTION("DRM driver for lgd fhd cmd incell dsi panel");
+MODULE_LICENSE("GPL");
-- 
2.41.0.windows.1

